#+TITLE: référence API Kangaro'O
#+AUTHOR: Brice Tonon
#+OPTIONS: ^:nil

* Authentification

** login

~POST /api/login~

Contenu attendu:
#+begin_src js
{
	"email":"email utilisateur",
	"password":"mot de passe"
}
#+end_src

Réponses possibles:
| code | réponse                                             |
|------+-----------------------------------------------------|
|  401 | err 12:"bad login"                                  |
|  200 | {"token":"token JWT", "name","fullname", "picture"} |

** inscription

~POST /api/signup~

Contenu attendu:
#+begin_src js
{
	"email":"email utilisateur",
	"password":"mot de passe",
	"name": "nom d'utilisateur",
	"fullname": "nom complet"
}
#+end_src

Réponses possibles:
| code | réponse                                           |
|------+---------------------------------------------------|
|  400 | err 10:'missing fields'                           |
|  201 | {"user":{utilisateur créé}, "token": "token JWT"} |

* profils utilisateur

** récupérer un profil

~GET /api/user/:id~

Réponses possibles:
| code | réponse            |
|------+--------------------|
|  404 | err 20:"not found" |
|  200 | {utilisateur}      |

** récupérer son propre profil

~GET /api/user/me~

fonctionne comme ~/api/user/:id~ mais renvoie l'utilisateur connecté

** rechercher des profils

~GET /api/user/search?s=~

recherche dans les utilisateurs, la variable s correspond au terme à rechercher

Réponse:
| code | réponse    |
|------+------------|
|  200 | [{user}]   |

** modifier son profil

~PATCH /api/user/me~

Contenu attendu:
#+begin_src js
{
	"name",
	"full_name",
	"phone",
	"title",
	"position",
	"department",
	"status",
	"location",
	"website",
	"contact_email"
}
#+end_src

Il n'est pas necessaire de remplir tous les champs, seuls les champs défini seront modifié en BDD (/!\ de part le fonctionnement de cette route il est impossible de remettre un champ à null ou à "" si il est défini, pour celà il faut utiliser PUT)

Réponses possibles:
| code | réponse                 |
|------+-------------------------|
|  400 | err 13:"already exist"  |
|  200 | {user}                  |

~PUT /api/user/me~

fonctionne comme patch à la différence qu'il modifie tous les champs, les champs non définis seront remis à null

Réponses possibles:
| code | réponse                 |
|------+-------------------------|
|  400 | err 10:"missing fields" |
|  400 | err 13:"already exist"  |
|  200 | {user}                  |

** modifier son avatar

~POST /api/user/me/avatar~

cette route attend des données de type multipart/form-data avec un fichier image sur le champ "file"

le fichier envoyé sera enregistré dans le dossier media et accessible sur l'adresse ~/media/<nom du fichier>~

le fichier sera également défini comme photo de profil de l'utilisateur

Réponses possibles:
| code | réponse                 |
|------+-------------------------|
|  400 | err 30:"no file"        |
|  400 | err 31:"bad file"       |
|  400 | err 32:"file too large" |
|  200 | {user}                  |


** supprimer son profil

~DELETE /api/user/me~

Contenu attendu:
#+begin_src js
{
	"password"
}
#+end_src

Cette route supprime le compte de l'utilisateur, le mot de passe est attendu en plus du token par mesure de sécurité

Réponses possibles:
| code | réponse                 |
|------+-------------------------|
|  400 | err 10:"missing fields" |
|  401 | err 12:"bad login"      |
|  204 |                         |

* groupes

** créer un groupe

~POST /api/group~

Contenu attendu:
#+begin_src js
{
	"name":"nom du groupe"
}
#+end_src

Réponses possibles:
| code | réponse                 |
|------+-------------------------|
|  400 | err 10:"missing fields" |
|  400 | err 13:"already exist"  |
|  201 | {groupe créé}           |

à faire: définir l'erreur si un groupe du même nom est créé (pour l'instant ça renvoie une erreur 500)

** afficher les groupes rejoint

~GET /api/group/joined~

affiche les groupes dans lequel l'utilisateur est enregistré

Réponse:
| code | réponse    |
|------+------------|
|  200 | [{groupe}] |

** annuaire des groupes

~GET /api/group/directory~

affiche les groupes visibles

Réponse:
| code | réponse    |
|------+------------|
|  200 | [{groupe}] |

** recherche de groupe

~GET /api/group/search?s=~

recherche dans les groupes visibles, la variable s correspond au terme à rechercher

Réponse:
| code | réponse    |
|------+------------|
|  200 | [{groupe}] |

** rejoindre un groupe

~POST /api/group/:id/join~

Réponses possibles:
| code | réponse                           |
|------+-----------------------------------|
|  403 | err 21:"not enough rights"        |
|  404 | err 20:"not found"                |
|  204 |                                   |

** quitter un groupe

~POST /api/group/:id/leave~

Réponses possibles:
| code | réponse                      |
|------+------------------------------|
|  404 | err 20:"not found"           |
|  403 | err 21:"not enough rights"   |
|  403 | err 22 "creator can't leave" |
|  204 |                              |

** modifier un groupe

~PATCH /api/group/:id~

Contenu attendu:
#+begin_src js
{
	"name"
}
#+end_src

Réponses possibles:
| code | réponse                    |
|------+----------------------------|
|  400 | err 13:"already exist"     |
|  403 | err 21:"not enough rights" |
|  200 | {group}                    |

** supprimer un groupe

~DELETE /api/group/:id~

supprime le groupe ainsi que tous les channels associé

Réponses possibles:
| code | réponse                    |
|------+----------------------------|
|  403 | err 21:"not enough rights" |
|  204 |                            |

* canals

** créer un canal dans un groupe

~POST /api/group/:id/channel~

Contenu attendu:
#+begin_src js
{
	"name":"nom du canal"
}
#+end_src

Réponses possibles:
| code | réponse                    |
|------+----------------------------|
|  404 | err 20:"not found"         |
|  403 | err 21:"not enough rights" |
|  400 | err 13:"already exist"     |
|  201 | {channel}                  |

** voir les canals d'un groupe

~GET /api/group/:id/channel~

Réponses possibles:
| code | réponse                    |
|------+----------------------------|
|  403 | err 21:"not enough rights" |
|  404 | err 20:"not found"         |
|  200 | [{channel}]                |

** voir les canals auquel on a accès

~GET /api/user/me/channel~

Réponse:
| code | réponse     |
|------+-------------|
|  200 | [{channel}] |

** modifier un canal

~PATCH /api/channel/:id~

Contenu attendu:
#+begin_src js
{
	"name"
}
#+end_src

Réponses possibles:
| code | réponse                    |
|------+----------------------------|
|  400 | err 13:"already exist"     |
|  403 | err 21:"not enough rights" |
|  200 | {channel}                  |

** supprimer un canal

~DELETE /api/channel/:id~

Réponses possibles:
| code | réponse                    |
|------+----------------------------|
|  403 | err 21:"not enough rights" |
|  200 | {channel}                  |

* messages

** récupérer les messages

~GET /api/channel/:id/message?time=2023-07-21T10%3A04%3A34.389Z~

récupère les 50 derniers messages d'un channel si la variable time n'est pas défini

si time est défini, récupère les 50 derniers messages anterieurs à la date donnée

Réponses possibles:
| code | réponse                    |
|------+----------------------------|
|  403 | err 21:"not enough rights" |
|  200 | [{message}]                |

** uploader un fichier

~POST /api/upload~

cette route attend des données de type multipart/form-data avec un fichier image sur le champ "file"

le fichier envoyé sera enregistré dans le dossier media et accessible sur l'adresse ~/media/<nom du fichier>~

Réponses possibles:
| code | réponse                   |
|------+---------------------------|
|  400 | err 30:"no file"          |
|  400 | err 31:"bad file"         |
|  400 | err 32:"file too large"   |
|  200 | {filename:nom du fichier} |
